/**
 * @file jPackage.js
 * 
 */
(function() {

	/* Loaded Packages */
	var pkgs = {};
	var rewriteHandlers = [], errors = [];
	
	/* TODO: cross browser */
	var xml = new XMLHttpRequest();

	/* default settings */
	var params = {

		debug: true,
		method: 'GET',
		path: "",
		suffix: 'js'

	};

	/* jPackage Error Class */
	var jPackageError = function(path, msg, originalError) {

		this.path = path;
		this.message = msg;
		this.originalError = originalError;

	};

	/**
	 * jPackageError.loadAsScript()
	 * Since packages are fetched as text and compiled with new Function(text), debugging is hard, because we won't get any usable trace.
	 * So by calling jPackageError.loadAsScript() the package is being loaded via a script tag.
	 * We can then use the browser's console to find syntax errors
	 */
	jPackageError.prototype.loadAsScript = function() {

		this.script = this.script || document.createElement("script");

		this.script.language = "javascript";
		this.script.src = this.path;

		document.head.appendChild(this.script);
		
	}

	/**
	 * This will take the textual representation of the package and try to compile it via new Function()
	 * @param path path of the fetched package
	 * @param pkg pkg as text
	 * @return true on success, false otherwise
	 */
	var compile = function(path, pkg) {

		try {

			/* Compile Package */
			(new Function(pkg))();

		} catch(e) {

			errors.push(new jPackageError(path, "Failed to compile '" + path + "'", e));
			return false;

		}
		
		return true;
	};

	
	/**
	 * Try to fetch a package via a path generated by the rewriteHandlers.
	 * If the fetch is successfull, skip remaining handlers and try to compile package
	 * @param pkg Name of the package to load
	 * @return true on comlete success (fetch and compile or package exists already), false otherwise
	 */
	var tryLoad = function(pkg) {

		/* Package already loaded, nothing to do */
		if(pkg in pkgs) return true;

		/* try each rewrite handler */
		for(var i = 0; i < rewriteHandlers.length; ++i) {

			/* generate path */
			var path = rewriteHandlers[i](params.path, pkg, params.suffix);

			try {
				/* prepare xmlrequest */
				xml.open(params.method, path, false);
				
				/* and process request */
				xml.send(null);

			} catch(e) {

				/* Resolve Error, Method Error, Cross origin etc. */
				errors.push(new jPackageError(path, "Failed to fetch '" + pkg + "' via '" + path + "'", e));
				continue;

			}

			/* Fetch was successfull. We won't try any other RewriteHandlers, either return true or false here  */
			if(xml.status == 200) {

				/* Compile Error ? */
				if(!compile(path, xml.responseText)) {

					return false;
				}

				return true;

			} else {

				/* Non successfule fetch, try next RewriteHandler if available */
				errors.push(new jPackageError(path, "Failed to fetch '" + path + "': " + xml.status + " " + xml.statusText, null));
				continue;

			}

		}

		/* No RewriteHandlers returned a valid jPackage URI */
		return false;
		
	};

	/**
	 * Fetch or register jPackage
	 * @param package Either a String or an Object that represents a jPackage.
	 */
	var jPackage = function(pkg) {

		/* Fetch jPackage */
		if(typeof pkg == "string") {
	
			/* Loaded already ? */
			if(!(pkg in pkgs)) {
				/* Try to fetch it */
				tryLoad(pkg);
			}

			return pkgs[pkg] || null;

		} else { /* Register jPackage*/

			console.log(pkg);

		}
	};

	/**
	 * Register a handler to rewrite package to URI
	 * @param handler callback
	 */
	jPackage.registerRewriteHandler = function(handler) {

		if(rewriteHandlers.indexOf(handler) < 0) rewriteHandlers.push(handler);

	};

	/**
	 * Configure jpackage
	 * @param options Object of options to be set
	 */
	jPackage.config = function(options) {
		for(o in options) {
			params[o] = options[o];
		}
	}

	/**
	 * Seal jPackage
	 * After configuring and registering all rewriteHandlers, jPackage can be sealed, so no script loaded later on can manipulate the loading process
	 */
	jPackage.seal = function() {
		jPackage.registerRewriteHandler = Function.prototype;
		jPackage.config = Function.prototype;
	}

	/* Register main RewriteHandler will rewrite package a.b.c to [params.path]/a/b/c.[params.suffix] */
	jPackage.registerRewriteHandler(function(path, pkg, suffix) {

		pkg = pkg.replace(/\./g, "/");
		return (path ? path.replace(/\/*$/, '') + '/' : '') + pkg + "." + suffix.replace(/^\./, "");

	});

	/**
	 * @returns errors Object
	 */
	jPackage.errors = function() {
		return errors;
	};

	/* make jPackage unmodifyable */
	Object.defineProperty(window, "jPackage", { value: jPackage });
	
})();
